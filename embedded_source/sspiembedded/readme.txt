            Lattice Semiconductor Corp.
            Slave SPI Embedded V4.0

Slave SPI Embedded V4.0		Date: 10/01/10
=============================================
1.  Support XO2 Slave SPI Programming.

Slave SPI Embedded V3.0		Date: 10/01/08
=============================================
1.  FEATURE- Support Slave SPI Encryption Programming.


Slave SPI Embedded V2.1		Date: 9/25/08
=============================================

1	Description

Slave SPI (SSPI) Embedded is a high-level programming solution that enables 
programming Lattice Semiconductor's XP2 and future FPGA families with 
built-in Serial Peripheral Interface (SPI) port through embedded system.  
This allows users to perform real-time reconfiguration to 
Lattice Semiconductor's FPGA families.  Slave SPI Embedded system is 
developed in the way that is embedded system independent, so it is easy to 
port Slave SPI Embedded into different embedded systems with little 
modifications.  The SSPI Embedded source code is written in C, so the user 
may compile the code with specific C compiler, and load it to the 
respective embedded system.

Unlike the Full VME, the SSPI file generator utility will not be available 
as a separate executable.  Instead it will be integrated into ispVM System 
and will only be available through the graphical user interface.  
Another difference is that the VME file will consist of two separate 
files: an algorithm file and a data file.  Not every operation requires 
a data file.  However, every operation will generate an algorithm file.

Once the VME data and algorithm files have been generated, it can be 
fed into the SSPI Embedded Processor.  Although the processor is called 
SSPI Embedded, it actually operates in Master SPI mode because it actually 
sends commands to Lattice Semiconductor's devices through their SPI port.  
The SSPI Embedded processor  is in forms of C code that you may include it 
in your own embedded system.  

2	Limitations and Requirement
2.1	Device Requirement
·	Only Lattice Semiconductor’s FPGA families with SPI port supported
·	Sequential programming only.  Turbo programming is not supported
·	The SSPI port must be enabled on the device in order to use the 
	SSPI interface. This is done by setting the SLAVE_SPI_PORT to Enable 
	using the Design Planner in ispLEVER®. This option is shown in the 
	Global tab of the Design Planner Spreadsheet view.

2.2	Embedded System Requirement
·	General Peripheral I/O (GPIO) port or dedicated SPI port required
·	A compiler supporting C code for the target embedded system is required
·	Read and Save, display operation not supported

3	How to use SSPI Embedded
3.1	Generating SSPI Embedded Files
The SSPI Embedded files can be generated through ispVM System by selecting 
the CPU button on the toolbar menu.  The SSPI Embedded generation dialog 
allows the user to generate the file in hex (C compatible) array or binary.  
The binary SSPI file can be used by the PC version of SSPI Embedded and 
utilizes the extension *.SEA for algorithm file, and *.SED for data file.  
Also the binary file can be uploaded to internal / external memory of the
embedded system if the user plan to implement the system in that manner.
 
The hex file is a C programming language file that must be compiled with 
the EPROM version of SSPI Embedded processor and utilizes the extension *.C.  
The binary file is generated by default.  Other options are available 
through the dialog, such as whether to compress the data file, add comments
to the algorithm, or disable generating the algorithm or data file.

3.2	Processing the SSPI Embedded Files
The Hex SSPI files must be compiled along with SSPI Embedded processor.
For some compilers, the user need to remove "xdata" from the beginning of
every variable definition in both algorithm file and data file.

The user may also mix and match the algorithm and data in different formats.
For example, if the embedded system does not have big resources for compiling
the data with the SSPI Embedded processor, compiling the algorithm with the 
processor while putting the binary data in external memory could be an
alternative.

3.3	SSPI Embedded Source code
SSPI Embedded Source code comes in different format.  
SSPIEm folder contains the generic SSPI Embedded source code.  
SSPIEm_EPROM folder contains the code that is for compiling algorithm and data with the processor.  
For more detail information about configuration, please refer to document Lattice SSPI Embedded usage note.doc.

3.4	PC emulation
SSPI Embedded can be emulated on PC.  There are two executables for emulation:
sspiem_usb, which is for Lattice Download USB cable; and sspiem_nt, which is 
for Lattice Parallel cable.

sspiem_usb Usage:
Usage: sspiem_usb -pa <USB name> [option] sea_file [sed_file]
Example: sspiem_usb -pa ezusb-0 algo.sea data.sed
              sspiem_usb -pa ezusb-0 -dd c:\ispTOOL\ispvmsystem\ algo.sea
Field   -pa:   set USB name (required).
Option  -dd:   set USB driver directory.

sspiem_nt Usage:
Usage: sspiem_usb sea_file [sed_file]
Example: sspiem_usb algo.sea data.sed
              sspiem_usb algo.sea